#include <Arduino.h>

//#include "helloworld.h"
#include "sensor.h"

#include <uxr/client/client.h>
#include <ucdr/microcdr.h>

#include <spi_flash.h>

#include <stdio.h> //printf
// #include <string.h>   //strcmp
// #include <stdlib.h>   //atoi
// #include <inttypes.h> // printing int64_t

#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <time.h>

#define STREAM_HISTORY 2
#define BUFFER_SIZE UXR_CONFIG_UDP_TRANSPORT_MTU *STREAM_HISTORY

#define SSID "Chats-WIFI"
#define PASSWD "0899247328"
#define MAX_TOPICS 1000

#define MAX_AGENTS 10

/* DHT sensor */
#include "DHT.h"
#define DHTPIN D1
#define DHTTYPE DHT11 // DHT 11
//#define DHTTYPE DHT22 // DHT 22 (AM2302), AM2321
//#define DHTTYPE DHT21 // DHT 21 (AM2301)
DHT dht(DHTPIN, DHTTYPE);

uxrAgentAddress agent;

void connectToWifi()
{
  WiFi.mode(WIFI_STA);
  WiFi.begin(SSID, PASSWD);

  int attempts = 0;
  const int maxAttempts = 20;

  while (WiFi.status() != WL_CONNECTED && attempts < maxAttempts)
  {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nFailed to connect. Restarting...");
    ESP.restart();
  }

  printf("\n Connected to: %s \n", SSID);
  printf("IP Address: %s \n", WiFi.localIP().toString().c_str());
}

void on_agent_found(const uxrAgentAddress *address, void *args)
{
  (void)args;
  agent.ip = address->ip;
  agent.port = address->port;
  printf("Found agent => ip: %s, port: %d\n", agent.ip, agent.port);
  return;
}

void setup()
{
  Serial.begin(9600);
  dht.begin();

  WiFiUDP udp_instance;

  agent.ip = "192.168.254.126";
  agent.port = 2018;

  connectToWifi();

  configTime(7 * 3600, 0, "pool.ntp.org", "time.nist.gov"); // GMT+7, no DST
  Serial.println("Waiting for time sync");

  // รอจนกว่าจะได้เวลาที่ถูกต้อง
  while (time(nullptr) < 1600000000) {
      Serial.print(".");
      delay(100);
  }
  Serial.println("\nTime synchronized");

  uxr_discovery_agents_default(2, 1000, on_agent_found, NULL, &udp_instance);

  // Transport
  uxrUDPTransport transport;
  uxrUDPPlatform udp_platform;
  udp_platform.udp_instance = &udp_instance;

  uxrSession session;

  uint8_t output_reliable_stream_buffer[BUFFER_SIZE];
  uint8_t input_reliable_stream_buffer[BUFFER_SIZE];

  const char *participant_xml = "<dds>"
                                "<participant>"
                                "<rtps>"
                                "<name>esp8266_xrce_participant</name>"
                                "</rtps>"
                                "</participant>"
                                "</dds>";
  const char *topic_xml = "<dds>"
                          "<topic>"
                          "<name>SensorData</name>"
                          "<dataType>Sensor</dataType>"
                          "</topic>"
                          "</dds>";
  const char *publisher_xml = "";
  const char *datawriter_xml = "<dds>"
                               "<data_writer>"
                               "<topic>"
                               "<kind>NO_KEY</kind>"
                               "<name>SensorData</name>"
                               "<dataType>Sensor</dataType>"
                               "</topic>"
                               "</data_writer>"
                               "</dds>";

  uint32_t count = 0;
  const char * ip_copy = strdup(agent.ip); // copy of agent.ip should be taken

  while (count != MAX_TOPICS)
  {
    if (!uxr_init_udp_transport(&transport, &udp_platform, ip_copy, agent.port)) //copy of agent.ip should be passed
    {
      Serial.print("Error at create transport.\n");
    }
    else
    {
      Serial.print("Created transport.\n");
    }

    // Session
    uxr_init_session(&session, &transport.comm, 0xAAAABBBB);
    if (!uxr_create_session(&session))
    {
      printf("Error at create session.\n");
    }
    else
    {
      printf("Created Session.\n");
    }

    // Streams
    uxrStreamId reliable_out = uxr_create_output_reliable_stream(&session, output_reliable_stream_buffer, BUFFER_SIZE, STREAM_HISTORY);
    uxr_create_input_reliable_stream(&session, input_reliable_stream_buffer, BUFFER_SIZE, STREAM_HISTORY);

    // Create entities
    uxrObjectId participant_id = uxr_object_id(0x01, UXR_PARTICIPANT_ID);
    uint16_t participant_req = uxr_buffer_create_participant_xml(&session, reliable_out, participant_id, 0, participant_xml, UXR_REPLACE);
    uxrObjectId topic_id = uxr_object_id(0x01, UXR_TOPIC_ID);
    uint16_t topic_req = uxr_buffer_create_topic_xml(&session, reliable_out, topic_id, participant_id, topic_xml, UXR_REPLACE);
    uxrObjectId publisher_id = uxr_object_id(0x01, UXR_PUBLISHER_ID);
    uint16_t publisher_req = uxr_buffer_create_publisher_xml(&session, reliable_out, publisher_id, participant_id, publisher_xml, UXR_REPLACE);
    uxrObjectId datawriter_id = uxr_object_id(0x01, UXR_DATAWRITER_ID);
    uint16_t datawriter_req = uxr_buffer_create_datawriter_xml(&session, reliable_out, datawriter_id, publisher_id, datawriter_xml, UXR_REPLACE);

    //Send create entities message and wait its status
    uint8_t status[4];
    uint16_t requests[4] = {participant_req, topic_req, publisher_req, datawriter_req};

    if (!uxr_run_session_until_all_status(&session, 1000, requests, status, 4))
    {
      //printf("The request is: participant: %i topic: %i publisher: %i darawriter: %i\n", requests[0], requests[1], requests[2], requests[3]);
      printf("Error at create entities: participant: %i topic: %i publisher: %i darawriter: %i\n", status[0], status[1], status[2], status[3]);
      // printf("Time:%" PRId64 "\n", uxr_millis());
    }
    else
    {
      printf("Created Entities. \n");
    }

    // Read sensor data
    float h = dht.readHumidity();
    float t = dht.readTemperature();
    float f = dht.readTemperature(true);

    if (isnan(h) || isnan(t) || isnan(f)) {
      Serial.println(F("Failed to read from DHT sensor!"));
      return;
    }

    //time_t now = time(nullptr);
    int32_t ts = (int32_t)time(nullptr);

    // Write topics
    bool connected = true;
    while (connected && count < MAX_TOPICS)
    {
      sensor topic = { 
        "esp8266",
        t,
        h,
        ts,
      };

      ucdrBuffer ub;
      uint32_t topic_size = sensor_size_of_topic(&topic, 0);

      //printf("Topic size: %u\n", topic_size);
      if (topic_size > BUFFER_SIZE) {
          Serial.println("Error: Topic size exceeds buffer size");
          continue;
      }

      uxr_prepare_output_stream(&session, reliable_out, datawriter_id, &ub, topic_size);
      sensor_serialize_topic(&ub, &topic);

      printf("Send topic: device_id=%s, temperature=%.1f, humidity=%.1f, timestamp=%d\n", 
        topic.device_id, 
        topic.temperature, 
        topic.humidity,
        topic.timestamp);

      connected = uxr_run_session_until_confirm_delivery(&session, 1000);
      delay(2000);
      count++;
    }

    if (!(count == MAX_TOPICS))
    {
      if (!(WiFi.status() == WL_CONNECTED))
      {
        printf("%s not found... Reconnecting\n", SSID);
        connectToWifi();
      }
      else if (!connected)
      {
        printf("Master Missing!!!\n");
        printf("Reconnecting...\n");
      }
    }
  }

  if (ip_copy != NULL) {
    free((void*)ip_copy);  // free หลังใช้งานเสร็จ
  }
  // Delete resources
  uxr_delete_session(&session);
  uxr_close_udp_transport(&transport);
}

void loop()
{
}